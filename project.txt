import sqlite3
import argparse


def init_db():
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT NOT NULL,
                        completed BOOLEAN NOT NULL DEFAULT 0)''')
    conn.commit()
    conn.close()


def add_task(title):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (title, completed) VALUES (?, 0)", (title,))
    conn.commit()
    conn.close()
    print(f"Task added: {title}")


def list_tasks():
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, completed FROM tasks")
    tasks = cursor.fetchall()
    conn.close()
    
    if not tasks:
        print("No tasks found.")
        return
    
    for task in tasks:
        status = "[âœ“]" if task[2] else "[ ]"
        print(f"{task[0]}. {status} {task[1]}")


def complete_task(task_id):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET completed = 1 WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()
    print(f"Task {task_id} marked as completed.")


def remove_task(task_id):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()
    print(f"Task {task_id} removed.")


def main():
    parser = argparse.ArgumentParser(description="CLI Task Manager")
    parser.add_argument("--add", metavar="TASK", type=str, help="Add a new task")
    parser.add_argument("--list", action="store_true", help="List all tasks")
    parser.add_argument("--complete", metavar="ID", type=int, help="Mark task as completed")
    parser.add_argument("--remove", metavar="ID", type=int, help="Remove a task")
    
    args = parser.parse_args()
    
    init_db()
    
    if args.add:
        add_task(args.add)
    elif args.list:
        list_tasks()
    elif args.complete:
        complete_task(args.complete)
    elif args.remove:
        remove_task(args.remove)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
